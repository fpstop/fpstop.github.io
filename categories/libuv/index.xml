<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Libuv on 徐锦平的博客</title>
    <link>http://www.fpstop.com/categories/libuv/</link>
    <description>Recent content in Libuv on 徐锦平的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Jul 2017 18:10:19 +0800</lastBuildDate>
    <atom:link href="http://www.fpstop.com/categories/libuv/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>libuv文档 翻译</title>
      <link>http://www.fpstop.com/third/libuv_doc/</link>
      <pubDate>Sat, 29 Jul 2017 18:10:19 +0800</pubDate>
      
      <guid>http://www.fpstop.com/third/libuv_doc/</guid>
      <description>

&lt;p&gt;libuv的文档直接就是md的，哈哈&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/libuv/libuv/master/img/banner.png&#34; alt=&#34;libuv&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;libuv is a multi-platform support library with a focus on asynchronous I/O. It
was primarily developed for use by &lt;a href=&#34;http://nodejs.org&#34;&gt;Node.js&lt;/a&gt;, but it&amp;rsquo;s also
used by &lt;a href=&#34;http://luvit.io/&#34;&gt;Luvit&lt;/a&gt;, &lt;a href=&#34;http://julialang.org/&#34;&gt;Julia&lt;/a&gt;,
&lt;a href=&#34;https://github.com/saghul/pyuv&#34;&gt;pyuv&lt;/a&gt;, and &lt;a href=&#34;https://github.com/libuv/libuv/wiki/Projects-that-use-libuv&#34;&gt;others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;libuv是个多平台的库，专注异步IO。主要为了node.js 开发的。&lt;/p&gt;

&lt;h2 id=&#34;feature-highlights&#34;&gt;Feature highlights&lt;/h2&gt;

&lt;h2 id=&#34;特色&#34;&gt;特色&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Full-featured event loop backed by epoll, kqueue, IOCP, event ports.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;支持全部事件循环，包括。。。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Asynchronous TCP and UDP sockets&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;异步tcp和udp&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Asynchronous DNS resolution&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;异步dns解析（libevent也支持）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Asynchronous file and file system operations&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;异步文件和文件系统操作。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;File system events&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;文件系统事件。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ANSI escape code controlled TTY&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;就是在控制台打印出彩色，高亮，粗体的输出，没啥用。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;IPC with socket sharing, using Unix domain sockets or named pipes (Windows)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;进程间通信（IPC），共享socket。基于unix 域socket或者命名管道。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Child processes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;子进程&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Thread pool&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;线程池&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Signal handling&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;信号处理&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;High resolution clock&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;高精度时钟，不过c++11 已经支持了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Threading and synchronization primitives&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;线程和同步原语。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;versioning&#34;&gt;Versioning&lt;/h2&gt;

&lt;p&gt;Starting with version 1.0.0 libuv follows the &lt;a href=&#34;http://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;
scheme. The API change and backwards compatibility rules are those indicated by
SemVer. libuv will keep a stable ABI across major releases.&lt;/p&gt;

&lt;p&gt;从1.0.0开始开始符合一个什么标准。&lt;/p&gt;

&lt;h2 id=&#34;community&#34;&gt;Community&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups.google.com/group/libuv&#34;&gt;Mailing list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webchat.freenode.net?channels=libuv&amp;amp;uio=d4&#34;&gt;IRC chatroom (#libuv@irc.freenode.org)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;

&lt;h3 id=&#34;official-api-documentation&#34;&gt;Official API documentation&lt;/h3&gt;

&lt;p&gt;Located in the docs/ subdirectory. It uses the &lt;a href=&#34;http://sphinx-doc.org/&#34;&gt;Sphinx&lt;/a&gt;
framework, which makes it possible to build the documentation in multiple
formats.&lt;/p&gt;

&lt;p&gt;Show different supported building options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build documentation as HTML:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build documentation as HTML and live reload it when it changes (this requires
sphinx-autobuild to be installed and is only supported on Unix):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make livehtml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build documentation as man pages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make man
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build documentation as ePub:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make epub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: Windows users need to use make.bat instead of plain &amp;lsquo;make&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Documentation can be browsed online &lt;a href=&#34;http://docs.libuv.org&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/libuv/libuv/tree/master/test&#34;&gt;tests and benchmarks&lt;/a&gt;
also serve as API specification and usage examples.&lt;/p&gt;

&lt;h3 id=&#34;other-resources&#34;&gt;Other resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nikhilm.github.com/uvbook/&#34;&gt;An Introduction to libuv&lt;/a&gt;
&amp;mdash; An overview of libuv with tutorials.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=nGn60vDSxQ4&#34;&gt;LXJS 2012 talk&lt;/a&gt;
&amp;mdash; High-level introductory talk about libuv.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thlorenz/libuv-dox&#34;&gt;libuv-dox&lt;/a&gt;
&amp;mdash; Documenting types and methods of libuv, mostly by reading uv.h.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thlorenz/learnuv&#34;&gt;learnuv&lt;/a&gt;
&amp;mdash; Learn uv for fun and profit, a self guided workshop to libuv.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These resources are not handled by libuv maintainers and might be out of
date. Please verify it before opening new issues.&lt;/p&gt;

&lt;h2 id=&#34;downloading&#34;&gt;Downloading&lt;/h2&gt;

&lt;p&gt;libuv can be downloaded either from the
&lt;a href=&#34;https://github.com/libuv/libuv&#34;&gt;GitHub repository&lt;/a&gt;
or from the &lt;a href=&#34;http://dist.libuv.org/dist/&#34;&gt;downloads site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Starting with libuv 1.7.0, binaries for Windows are also provided. This is to
be considered EXPERIMENTAL.&lt;/p&gt;

&lt;p&gt;Before verifying the git tags or signature files, importing the relevant keys
is necessary. Key IDs are listed in the
&lt;a href=&#34;https://github.com/libuv/libuv/blob/master/MAINTAINERS.md&#34;&gt;MAINTAINERS&lt;/a&gt;
file, but are also available as git blob objects for easier use.&lt;/p&gt;

&lt;p&gt;Importing a key the usual way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --keyserver pool.sks-keyservers.net \
  --recv-keys AE9BC059
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Importing a key from a git blob object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git show pubkey-saghul | gpg --import
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;verifying-releases&#34;&gt;Verifying releases&lt;/h3&gt;

&lt;p&gt;Git tags are signed with the developer&amp;rsquo;s key, they can be verified as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git verify-tag v1.6.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Starting with libuv 1.7.0, the tarballs stored in the
&lt;a href=&#34;http://dist.libuv.org/dist/&#34;&gt;downloads site&lt;/a&gt; are signed and an accompanying
signature file sit alongside each. Once both the release tarball and the
signature file are downloaded, the file can be verified as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --verify libuv-1.7.0.tar.gz.sign
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-instructions&#34;&gt;Build Instructions&lt;/h2&gt;

&lt;p&gt;For GCC there are two build methods: via autotools or via &lt;a href=&#34;http://code.google.com/p/gyp/&#34;&gt;GYP&lt;/a&gt;.
GYP is a meta-build system which can generate MSVS, Makefile, and XCode
backends. It is best used for integration into other projects.&lt;/p&gt;

&lt;p&gt;To build with autotools:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sh autogen.sh
$ ./configure
$ make
$ make check
$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;

&lt;p&gt;First, &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python&lt;/a&gt; 2.6 or 2.7 must be installed as it is required by &lt;a href=&#34;http://code.google.com/p/gyp/&#34;&gt;GYP&lt;/a&gt;.
If python is not in your path, set the environment variable &lt;code&gt;PYTHON&lt;/code&gt; to its
location. For example: &lt;code&gt;set PYTHON=C:\Python27\python.exe&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To build with Visual Studio, launch a git shell (e.g. Cmd or PowerShell)
and run vcbuild.bat which will checkout the GYP code into build/gyp and
generate uv.sln as well as related project files.&lt;/p&gt;

&lt;p&gt;To have GYP generate build script for another system, checkout GYP into the
project tree manually:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://chromium.googlesource.com/external/gyp.git build/gyp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unix&#34;&gt;Unix&lt;/h3&gt;

&lt;p&gt;For Debug builds (recommended) run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./gyp_uv.py -f make
$ make -C out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Release builds run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./gyp_uv.py -f make
$ BUILDTYPE=Release make -C out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run &lt;code&gt;./gyp_uv.py -f make -Dtarget_arch=x32&lt;/code&gt; to build &lt;a href=&#34;https://en.wikipedia.org/wiki/X32_ABI&#34;&gt;x32&lt;/a&gt; binaries.&lt;/p&gt;

&lt;h3 id=&#34;os-x&#34;&gt;OS X&lt;/h3&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./gyp_uv.py -f xcode
$ xcodebuild -ARCHS=&amp;quot;x86_64&amp;quot; -project uv.xcodeproj \
     -configuration Release -target All
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using Homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install --HEAD libuv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note to OS X users:&lt;/p&gt;

&lt;p&gt;Make sure that you specify the architecture you wish to build for in the
&amp;ldquo;ARCHS&amp;rdquo; flag. You can specify more than one by delimiting with a space
(e.g. &amp;ldquo;x86_64 i386&amp;rdquo;).&lt;/p&gt;

&lt;h3 id=&#34;android&#34;&gt;Android&lt;/h3&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ source ./android-configure NDK_PATH gyp
$ make -C out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note for UNIX users: compile your project with &lt;code&gt;-D_LARGEFILE_SOURCE&lt;/code&gt; and
&lt;code&gt;-D_FILE_OFFSET_BITS=64&lt;/code&gt;. GYP builds take care of that automatically.&lt;/p&gt;

&lt;h3 id=&#34;using-ninja&#34;&gt;Using Ninja&lt;/h3&gt;

&lt;p&gt;To use ninja for build on ninja supported platforms, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./gyp_uv.py -f ninja
$ ninja -C out/Debug     #for debug build OR
$ ninja -C out/Release
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;running-tests&#34;&gt;Running tests&lt;/h3&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./gyp_uv.py -f make
$ make -C out
$ ./out/Debug/run-tests
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;supported-platforms&#34;&gt;Supported Platforms&lt;/h2&gt;

&lt;p&gt;Microsoft Windows operating systems since Windows XP SP2. It can be built
with either Visual Studio or MinGW. Consider using
&lt;a href=&#34;http://www.microsoft.com/visualstudio/eng/products/visual-studio-2010-express&#34;&gt;Visual Studio Express 2010&lt;/a&gt; or later if you do not have a full Visual
Studio license.&lt;/p&gt;

&lt;p&gt;Linux using the GCC toolchain.&lt;/p&gt;

&lt;p&gt;OS X using the GCC or XCode toolchain.&lt;/p&gt;

&lt;p&gt;Solaris 121 and later using GCC toolchain.&lt;/p&gt;

&lt;p&gt;AIX 6 and later using GCC toolchain (see notes).&lt;/p&gt;

&lt;h3 id=&#34;aix-notes&#34;&gt;AIX Notes&lt;/h3&gt;

&lt;p&gt;AIX support for filesystem events requires the non-default IBM &lt;code&gt;bos.ahafs&lt;/code&gt;
package to be installed.  This package provides the AIX Event Infrastructure
that is detected by &lt;code&gt;autoconf&lt;/code&gt;.
&lt;a href=&#34;http://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/&#34;&gt;IBM documentation&lt;/a&gt;
describes the package in more detail.&lt;/p&gt;

&lt;p&gt;AIX support for filesystem events is not compiled when building with &lt;code&gt;gyp&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;patches&#34;&gt;Patches&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/libuv/libuv/blob/master/CONTRIBUTING.md&#34;&gt;guidelines for contributing&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
