<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gcc on 徐锦平的博客</title>
    <link>http://www.fpstop.com/categories/gcc/</link>
    <description>Recent content in Gcc on 徐锦平的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Jun 2017 20:31:28 +0800</lastBuildDate>
    <atom:link href="http://www.fpstop.com/categories/gcc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GCC中的堆栈保护机制</title>
      <link>http://www.fpstop.com/linux/fstack-protector-strong/</link>
      <pubDate>Thu, 01 Jun 2017 20:31:28 +0800</pubDate>
      
      <guid>http://www.fpstop.com/linux/fstack-protector-strong/</guid>
      <description>

&lt;p&gt;在微软vs系列开发工具，可以开启 “Security Check” 选项，检查栈溢出，在gcc编译器应该也有类似的功能。&lt;/p&gt;

&lt;h1 id=&#34;栈的结构&#34;&gt;栈的结构&lt;/h1&gt;

&lt;p&gt;栈空间的起止位置由ebp和esp寄存器，栈上存有当前函数的参数，返回地址，函数的局部变量。每次调用函数，都会向栈中依次压入参数，返回地址，进入函数后，会预留出函数使用的局部变量的大小。&lt;/p&gt;

&lt;h1 id=&#34;栈溢出的危害&#34;&gt;栈溢出的危害&lt;/h1&gt;

&lt;p&gt;最大的危害会破坏函数的返回地址，“精心的破坏”会让你的函数跳入一个攻击者制定的函数，也就是新闻里常说的“执行任意代码”。&lt;/p&gt;

&lt;h1 id=&#34;防范&#34;&gt;防范&lt;/h1&gt;

&lt;p&gt;vs的Security Check和GCC的堆栈保护机制差不多，都是在返回地址和局部变量插入一个哨兵，由编译器自动插入代码，在函数开始时赋值一个特殊的值，函数退出时检查这个值是否被改变，如果改变了就是栈被破坏了。&lt;/p&gt;

&lt;h1 id=&#34;gcc中的堆栈保护机制&#34;&gt;GCC中的堆栈保护机制&lt;/h1&gt;

&lt;p&gt;gcc 4.9新加入的参数 -fstack-protector-strong&lt;/p&gt;

&lt;p&gt;编译器会自动调整局部变量在内存中的顺序，使char数组排在靠近返回地址。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
